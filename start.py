import os
import json
from oauth2client.service_account import ServiceAccountCredentials
import gspread

# –°–∫–æ–ø—ñ—é–π —Ü–µ–π scope
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]

# –û–¢–†–ò–ú–£–Ñ–ú–û –Ü –†–û–ó–ü–ê–†–°–Æ–Ñ–ú–û –ó–ú–Ü–ù–ù–£ –ó Railway
creds_raw = os.getenv("SERVICE_ACCOUNT_JSON")

# –ó–ê–ú–Ü–ù–Æ–Ñ–ú–û \\n –ù–ê –°–ü–†–ê–í–ñ–ù–Ü \n
creds_fixed = creds_raw.replace("\\n", "\n")

# –ü–ê–†–°–ò–ú–û –£ JSON
creds_dict = json.loads(creds_fixed)

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(creds)

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheet
spreadsheet_id = os.getenv("GOOGLE_SHEET_ID")
sheet = client.open_by_key(spreadsheet_id).sheet1
# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç–∏—Å—å", callback_data="choose_date")],
        [InlineKeyboardButton("üìã –ú–æ—ó –∑–∞–ø–∏—Å–∏", callback_data="my_bookings")]
    ]
    await update.message.reply_text("–í—ñ—Ç–∞—é! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=InlineKeyboardMarkup(keyboard))

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫
async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user = query.from_user.full_name

    if data == "choose_date":
        today = dt.now().date()
        days = [(today + timedelta(days=i)) for i in range(0, 180)]
        buttons = []
        for day in days:
            label = day.strftime("%d.%m.%Y (%A)")
            buttons.append([InlineKeyboardButton(label, callback_data=f"day_{day}")])
        await query.message.reply_text("üóì –û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É:", reply_markup=InlineKeyboardMarkup(buttons[:10]))

    elif data.startswith("day_"):
        date_str = data.replace("day_", "")
        context.user_data["selected_date"] = date_str
        hours = [f"{h:02}:00" for h in range(8, 20, 2)]
        booked = [r["–ß–∞—Å"] for r in sheet.get_all_records() if r["–î–∞—Ç–∞"] == date_str]
        available = [h for h in hours if h not in booked]
        buttons = [[InlineKeyboardButton(h, callback_data=f"confirm_{h}")] for h in available]
        buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="choose_date")])
        await query.message.reply_text(f"üïì –ì–æ–¥–∏–Ω–∏ –¥–ª—è {date_str}:", reply_markup=InlineKeyboardMarkup(buttons))

    elif data.startswith("confirm_"):
        hour = data.replace("confirm_", "")
        date_str = context.user_data.get("selected_date")
        context.user_data["pending"] = (date_str, hour)
        btns = [
            [InlineKeyboardButton("‚úÖ –¢–∞–∫", callback_data="save_booking")],
            [InlineKeyboardButton("‚ùå –ù—ñ", callback_data="choose_date")]
        ]
        await query.message.reply_text(f"–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–ø–∏—Å –Ω–∞ {date_str} –æ {hour}?", reply_markup=InlineKeyboardMarkup(btns))

    elif data == "save_booking":
        date_str, hour = context.user_data.get("pending", (None, None))
        sheet.append_row([user, date_str, hour])
        await query.message.reply_text(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {user}, {date_str} –Ω–∞ {hour}")

    elif data == "my_bookings":
        records = sheet.get_all_records()
        user_records = [r for r in records if r["–ü—Ä—ñ–∑–≤–∏—â–µ –Ü–º'—è"] == user]
        if not user_records:
            await query.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤.")
            return
        msg = "\n".join([f"{i+1}. {r['–î–∞—Ç–∞']} –æ {r['–ß–∞—Å']}" for i, r in enumerate(user_records)])
        await query.message.reply_text(f"üìã –í–∞—à—ñ –∑–∞–ø–∏—Å–∏:\n{msg}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    app = Application.builder().token(os.environ["BOT_TOKEN"]).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_buttons))
    await app.run_polling()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
