import logging
import os
import datetime
from datetime import datetime as dt
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (Application, CallbackContext, CallbackQueryHandler,
                          CommandHandler, ContextTypes, MessageHandler, filters)
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –¥–æ Google Sheets —á–µ—Ä–µ–∑ credentials.json
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
client = gspread.authorize(creds)
sheet = client.open_by_key(os.getenv('1Ug6Mze38Jr6uVLv9Tm74t2j42PkCFplELt7qjPFCg7I')).sheet1

# –û–±—Ä–æ–±–Ω–∏–∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ—ó –∫–æ–º–∞–Ω–¥–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç–∏—Å—å", callback_data="choose_date")],
        [InlineKeyboardButton("–ú–æ—ó –∑–∞–ø–∏—Å–∏", callback_data="my_bookings")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ñ—Ç–∞—é! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=reply_markup)

# –û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    if query.data == "choose_date":
        days = [(dt.now() + datetime.timedelta(days=i)).strftime("%Y-%m-%d") for i in range(7)]
        keyboard = [[InlineKeyboardButton(day, callback_data=f"day_{day}")] for day in days]
        await query.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data.startswith("day_"):
        date = query.data.split("_")[1]
        hours = [f"{h:02}:00" for h in range(8, 20, 2)]
        records = sheet.get_all_records()
        booked_hours = [r["–ß–∞—Å"] for r in records if r.get("–î–∞—Ç–∞") == date]
        free_hours = [h for h in hours if h not in booked_hours]
        keyboard = [[InlineKeyboardButton(hour, callback_data=f"book_{date}_{hour}")] for hour in free_hours]
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="choose_date")])
        await query.message.reply_text(f"–û–±–µ—Ä—ñ—Ç—å –≥–æ–¥–∏–Ω—É –¥–ª—è {date}:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data.startswith("book_"):
        _, date, hour = query.data.split("_")
        user = query.from_user.full_name
        sheet.append_row([user, date, hour])
        await query.message.reply_text(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {user}, {date} –Ω–∞ {hour}")

    elif query.data == "my_bookings":
        user = query.from_user.full_name
        records = sheet.get_all_records()
        user_records = []
        for r in records:
            if r.get("–ü—Ä—ñ–∑–≤–∏—â–µ –Ü–º'—è") == user:
                name = r.get("–ü—Ä—ñ–∑–≤–∏—â–µ –Ü–º'—è", "")
                time = r.get("–ß–∞—Å", "")
                user_records.append(f"{name} ‚Äî {time}")

        if user_records:
            msg = "üìã –¢–≤–æ—ó –∑–∞–ø–∏—Å–∏:\n" + "\n".join(user_records)
        else:
            msg = "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤."

        await query.message.reply_text(msg)

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É
if __name__ == "__main__":
    TOKEN = os.getenv("BOT_TOKEN")
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ")
    app.run_polling()
